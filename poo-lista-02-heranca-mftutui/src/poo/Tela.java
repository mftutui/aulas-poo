/*
 * Tela.java
 *
 * Esse projeto é só um esqueleto para ilustrar os conceitos de Herança e 
 * Polimorfismo.
 * 
 * Será necessário criar mais classes para representar:
 * - Cavaleiro e Arqueiro
 * 
 * Será necessário pensar em uma forma para organizar todos os personagens em
 * uma única ArrayList
 * 
 * Será necessário pensar em uma forma para permitir 'mover' ou 'atacar'
 * todos os personagens, somente aldeões, somente arqueiros ou somente 
 * cavaleiros.
 * 
 * Pensar em uma solução com Classe Abstrata ou Interfaces
 * 
 * Created on 10/10/2011, 10:06:46
 */
package poo;

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;

/**
 *
 * http://docente.ifsc.edu.br/mello
 */
public class Tela extends javax.swing.JPanel {

    private Principal pai;   // Referência o JFrame 'pai'
    private ArrayList<Personagem> personagens; // Lista com os personagens

    /**
     * Creates new form Tela
     */
    public Tela(Principal aThis) {
        initComponents();
        this.pai = aThis;
        this.setBackground(Color.white); // Muda a cor do fundo para branco
        this.personagens = new ArrayList<Personagem>();
    }

    /**
     * Sobreescrevendo o método paint do JPanel Irá percorrer a Lista de
     * personagens e invocar o método desenhar de cada um destes
     *
     * @param g
     */
    @Override
    public void paint(Graphics g) {
        super.paint(g);

        // Percorrendo a lista de aldeoes
        for (Personagem p : personagens) {
            p.desenhar(g);
        }

        g.dispose(); // Liberando o contexto gráfico
    }

    /**
     * Cria um personagem nas coordenadas X e Y, indice z e desenha-o neste
     * JPanel e adiciona o mesmo na lista de personagens
     *
     * @param x coordenada X
     * @param y coordenada Y
     * @param z identificação do personagem
     */
    public void criarPersonagem(int x, int y, int z) {
        if (z == 1) {
            Aldeao a = new Aldeao(this, "aldeao", x, y);
            a.desenhar(super.getGraphics());
            personagens.add(a);
        }

        if (z == 2) {
            Cavaleiro a = new Cavaleiro(this, "cavaleiro", x, y);
            a.desenhar(super.getGraphics());
            personagens.add(a);
        }

        if (z == 3) {
            Arqueiro a = new Arqueiro(this, "arqueiro", x, y);
            a.desenhar(super.getGraphics());
            personagens.add(a);
        }
    }

    /**
     * Atualiza as coordenadas X ou Y de todos os personagens conforme
     * identificacao
     *
     * @param direcao
     * @param z identificação do personagem
     */
    public void movimentarPersonagem(int direcao, int z) {
        for (Personagem personagem : personagens) {
            if (personagem instanceof Aldeao && z == 1) {
                personagem.mover(direcao);
            }
            if (personagem instanceof Cavaleiro && z == 2) {
                personagem.mover(direcao);
            }
            if (personagem instanceof Arqueiro && z == 3) {
                personagem.mover(direcao);
            }
            if (z == 4){
                personagem.mover(direcao);
            }
        }
        // Depois que as coordenadas foram atualizadas é necessário repintar o
        //JPanel
        this.repaint();
    }

    /**
     * Altera o estado do aldeão de atacando para não atacando e vice-versa.
     * @param z identificação do personagem
     */
    public void atacarPersonagem(int z) {
        for (Personagem personagem : personagens) {
            if (personagem instanceof Aldeao && z == 1) {
                personagem.atacar();
            }
            if (personagem instanceof Cavaleiro && z == 2) {
                personagem.atacar();
            }
            if (personagem instanceof Arqueiro && z == 3) {
                personagem.atacar();
            }
            if (z == 4){
                personagem.atacar();
            }
        }
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 590, Short.MAX_VALUE)
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 316, Short.MAX_VALUE)
      );
   }// </editor-fold>//GEN-END:initComponents
   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables
}
